// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique

  // User info
  role          userRole?         @default(VOLUNTEER)
  profile       Profile?
  status        UserStatus?       @default(ACTIVE)
  createdEvents Event[]           @relation(name: "EventOwner")
  events        EventEnrollment[]
  preferences   UserPreferences?
}

model Profile {
  // Profile info
  firstName   String?
  lastName    String?
  imageURL    String?
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  phoneNumber String?

  @@id([userId])
}

model UserPreferences {
  // User settings info
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  sendEmailNotification Boolean @default(true)

  @@id([userId])
}

model Event {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Event info
  name         String
  location     String
  locationLink String?
  description  String
  imageURL     String?
  startDate    DateTime
  endDate      DateTime
  mode         EventMode?        @default(IN_PERSON)
  status       EventStatus?      @default(ACTIVE)
  owner        User?             @relation(fields: [ownerId], references: [id], name: "EventOwner")
  ownerId      String?
  attendees    EventEnrollment[]
  capacity     Int
}

model EventEnrollment {
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Attendees info
  eventId            String
  userId             String
  event              Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  cancelationMessage String?
  attendeeStatus     EnrollmentStatus @default(PENDING)

  @@id([userId, eventId])
}

model About {
  //Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id      String @id @default(cuid())
  content String
}

enum userRole {
  ADMIN
  VOLUNTEER
  SUPERVISOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum EventStatus {
  ACTIVE
  CANCELED
}

enum EventMode {
  VIRTUAL
  IN_PERSON
}

enum EnrollmentStatus {
  PENDING
  CHECKED_IN
  CHECKED_OUT
  REMOVED
  CANCELED
}
