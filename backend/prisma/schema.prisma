// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique

  // User info
  role          userRole?         @default(Volunteer)
  profile       Profile?
  verified      Boolean?          @default(false)
  hours         Int?              @default(0) //toal hours workd
  status        UserStatus?       @default(Active)
  createdEvents Event[]           @relation(name: "EventOwner")
  events        EventEnrollment[]
  preferences   UserPreferences?
  permissions   Permission[]      @relation(name: "RolePermission")
}

model Profile {
  // Profile info
  firstName           String?
  lastName            String?
  nickname            String?
  imageURL            String?
  disciplinaryNotices Int?    @default(0)
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              String
  phoneNumber         String?

  @@id([userId])
}

model UserPreferences {
  // User settings info
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  sendEmailNotification Boolean @default(true)
  sendPromotions        Boolean @default(false)

  @@id([userId])
}

model Permission {
  user           User    @relation(fields: [userId], references: [id], name: "RolePermission", onDelete: Cascade)
  userId         String
  canCreateEvent Boolean @default(false)
  canEditEvent   Boolean @default(false)
  canDeleteEvent Boolean @default(false)
  canAssignRoles Boolean @default(false)

  @@id([userId])
}

model Event {
  // Metadata
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Event info
  name        String
  subtitle    String?
  location    String
  description String
  imageURL    String?
  startDate   DateTime
  endDate     DateTime
  mode        EventMode?        @default(In_Person)
  status      EventStatus?      @default(Draft)
  owner       User              @relation(fields: [ownerId], references: [id], name: "EventOwner")
  ownerId     String
  attendees   EventEnrollment[]
  capacity    Int
  tags        EventTags[]
}

model EventTags {
  // Metadata
  id     String  @id @default(cuid())
  // Tag info
  name   String
  events Event[]
}

model EventEnrollment {
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Attendees info
  eventId            String
  userId             String
  event              Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  showedUp           Boolean? @default(false)
  workedHours        Int?     @default(0)
  canceled           Boolean? @default(false)
  cancelationMessage String?

  @@id([userId, eventId])
}

enum userRole {
  Admin
  Volunteer
  Supervisor
}

enum UserStatus {
  Active
  Inactive
  Hold
}

enum EventStatus {
  Draft
  Active
  Completed
  Canceled
}

enum EventMode {
  Virtual
  In_Person
}
